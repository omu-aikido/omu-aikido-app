---
interface Props {
    title: string;
}
const { title } = Astro.props;
import { ClientRouter } from "astro:transitions";
---

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta
        name="description"
        content="大阪公立大学で活動する天之武産合氣塾道場傘下の合気道部です。中百舌鳥キャンパスと杉本キャンパスの両方で、見学や体験を随時受け付けています。詳細な活動場所、日程、イベント情報をこちらでご確認ください！"
    />
    <meta name="keywords" content="大阪公立大学, 天之武産合氣塾, 合気道部" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="canonical" href="https://omu-aikido.com" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <ClientRouter fallback="swap" />
    <title>{title}</title>
    <script
        src="https://challenges.cloudflare.com/turnstile/v0/api.js"
        async
        defer></script>
    <script is:inline>
        // This code is inlined in the head to make dark mode instant & blocking.
        const getThemePreference = () => {
            if (
                typeof localStorage !== "undefined" &&
                localStorage.getItem("theme")
            ) {
                return localStorage.getItem("theme");
            }
            return window.matchMedia("(prefers-color-scheme: dark)").matches
                ? "dark"
                : "dark";
        };

        const applyTheme = () => {
            const isDark = getThemePreference() === "dark";
            document.documentElement.classList[isDark ? "add" : "remove"](
                "theme-dark"
            );
        };

        // Apply theme on initial load
        applyTheme();

        if (typeof localStorage !== "undefined") {
            // Watch the document element and persist user preference when it changes.
            const observer = new MutationObserver(() => {
                const isDark =
                    document.documentElement.classList.contains("theme-dark");
                localStorage.setItem("theme", isDark ? "dark" : "light");
            });
            observer.observe(document.documentElement, {
                attributes: true,
                attributeFilter: ["class"],
            });
        }

        // Apply theme after view transitions
        document.addEventListener("astro:after-swap", applyTheme);
        // Apply theme after page loads
        applyTheme();
    </script>
</head>

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FFYSPH0R87"
></script>
<script lang="js">
    window.dataLayer = window.dataLayer || [];
    function gtag() {
        dataLayer.push(arguments);
    }
    gtag("js", new Date());

    gtag("config", "G-FFYSPH0R87");
</script>

<style>
    body {
        margin: 0;
    }
    html {
        min-width: 390px;
    }
</style>
