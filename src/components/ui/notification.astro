---
interface Props {
    title: string;
    message: string;
    type?: "success" | "error" | "info";
    duration?: number; // in milliseconds
}

const { title, message, type = "info", duration = 5000 } = Astro.props as Props;
---

<astro-notify style="position: absolute; visibility: hidden;">
    <div
        class="notification-item relative bg-slate-200 dark:bg-slate-800 p-4 rounded-lg shadow-lg w-80 border border-slate-400 dark:border-slate-600 animate-slide-in"
        data-type={type}
        data-duration={duration}
    >
        <!-- Type indicator dot -->
        <span class="absolute -top-1 -left-1">
            <span
                class="notification-dot absolute inline-flex size-3 animate-ping rounded-full opacity-75"
            ></span>
            <span
                class="notification-dot absolute inline-flex size-3 rounded-full"
            ></span>
        </span>

        <div class="flex items-center justify-between mb-2">
            <h2 class="text-sm font-semibold">{title}</h2>
            <button
                class="close-button text-slate-400 hover:text-slate-600 dark:text-slate-500 dark:hover:text-slate-300"
            >
                ✕
            </button>
        </div>
        <p class="text-sm text-slate-600 dark:text-slate-400">{message}</p>
    </div>

    <style>
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        @keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }
        .animate-slide-in {
            animation: slideIn 0.3s ease-out forwards;
        }
        .animate-slide-out {
            animation: slideOut 0.3s ease-out forwards;
        }
    </style>
</astro-notify>

<script>
    interface NotificationOptions {
        title: string;
        message: string;
        type?: "success" | "error" | "info";
        duration?: number;
    }

    class AstroNotify extends HTMLElement {
        private notifications: HTMLElement[];
        private container: HTMLDivElement | null;

        constructor() {
            super();
            this.notifications = [];
            this.container = null;
        }

        connectedCallback() {
            // 通知コンテナの作成
            if (!document.getElementById("astro-notifications-container")) {
                this.container = document.createElement("div");
                this.container.id = "astro-notifications-container";
                this.container.className =
                    "fixed top-4 right-4 z-50 flex flex-col gap-2";
                document.body.appendChild(this.container);
            } else {
                this.container = document.getElementById(
                    "astro-notifications-container"
                ) as HTMLDivElement;
            }

            const notificationItem = this.querySelector(".notification-item");
            if (notificationItem) {
                this.showNotification(notificationItem as HTMLElement);
                this.classList.add("hidden");
            }
            this.setupCloseButtons();
        }

        showNotification(element: HTMLElement) {
            const clone = element.cloneNode(true) as HTMLElement;
            const duration = parseInt(element.dataset.duration || "5000");
            const type = element.dataset.type || "info";

            // 通知タイプに応じてドットにスタイルを適用
            const notificationDots =
                clone.querySelectorAll(".notification-dot");
            if (notificationDots.length > 0) {
                notificationDots.forEach((dot) => {
                    switch (type) {
                        case "success":
                            dot.classList.add("bg-green-500");
                            break;
                        case "error":
                            dot.classList.add("bg-red-500");
                            break;
                        case "info":
                        default:
                            dot.classList.add("bg-blue-500");
                            break;
                    }
                });
            }

            // 通知をコンテナに追加
            if (this.container) {
                this.container.appendChild(clone);
            }

            // 自動で消えるタイマーを設定
            if (duration > 0) {
                setTimeout(() => {
                    this.removeNotification(clone);
                }, duration);
            }

            return clone;
        }

        removeNotification(element: HTMLElement) {
            element.classList.remove("animate-slide-in");
            element.classList.add("animate-slide-out");

            setTimeout(() => {
                if (element.parentNode === this.container) {
                    this.container?.removeChild(element);
                }
            }, 300);
        }

        setupCloseButtons() {
            this.container?.addEventListener("click", (e: MouseEvent) => {
                const target = e.target as HTMLElement;
                if (
                    target.classList.contains("close-button") ||
                    target.closest(".close-button")
                ) {
                    const notification = target.closest(
                        ".notification-item"
                    ) as HTMLElement;
                    if (notification) {
                        this.removeNotification(notification);
                    }
                }
            });
        }
    }

    // カスタム要素を定義
    customElements.define("astro-notify", AstroNotify);
</script>
