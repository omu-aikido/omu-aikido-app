---
import { style } from "@/src/styles/component";
const userId = Astro.locals.auth().userId!;
import Recents from "./recents.astro";
import { createActivity, inputActivity } from "@/src/lib/query/activity";
import { resentlyActivity } from "@/src/lib/query/activity";
import RecentsPh from "./recents-ph.astro";
import ProgressCircle from "./progress-circle.astro";
import { actions } from "astro:actions";
import Notification from "./notification.astro";

let enable = true;
await resentlyActivity({
    userId: userId,
    limit: 1,
}).then((res) => {
    if (res instanceof Response) {
        console.error("Failed to fetch recent activities:", res.statusText);
        enable = false; // データ取得に失敗した場合は無効
    }
    enable = true; // データ取得に成功した場合は有効
});

const result = Astro.getActionResult(actions.record.add);
---

{
    result && !result.error && (
        <Notification
            title="記録の追加"
            message="記録が正常に追加されました。"
            type="success"
            duration={3000}
        />
    )
}
{
    result && result.error && (
        <Notification
            title="記録の追加"
            message={`記録の追加に失敗しました: ${result.error.message}`}
            type="error"
            duration={5000}
        />
    )
}

<form
    method="POST"
    action={actions.record.add}
    class="grid grid-cols-3 gap-4 items-center"
>
    <input type="hidden" name="userId" class="hidden" value={userId} />
    <label for="date" class="text-sm font-medium">
        日付<span class={style.text.necessary()}>*</span>
    </label>
    <input
        type="date"
        id="date"
        name="date"
        value=`${(new Date()).toISOString().split('T')[0]}`
        class={style.form.input({})}
        required
        disabled={!enable}
    />

    <label for="period" class="text-sm font-medium">
        稽古時間<span class={style.text.necessary()}>*</span>
    </label>
    <input
        type="number"
        id="period"
        name="period"
        value="1.5"
        step="0.5"
        class={style.form.input({
            disable: !enable,
        })}
        required
        disabled={!enable}
    />
    <button
        type="submit"
        id="record-submit"
        class={style.form.button()}
        disabled={!enable}
    >
        {!enable ? <ProgressCircle title="送信中" inline="inline" /> : "追加"}
    </button>

    <script>
        const form = document.querySelector("form")!;
        const button = document.getElementById(
            "record-submit"
        ) as HTMLButtonElement;
        form.addEventListener("submit", (event) => {
            event.preventDefault(); // フォームのデフォルト送信を防ぐ
            button.textContent = "送信中...";
            button.classList.add("text-slate-800", "dark:text-slate-100");
            button.disabled = true;
            form.submit(); // フォームを送信
        });
    </script>
</form>
