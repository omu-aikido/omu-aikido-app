---
import { style } from "@/src/styles/component";
const userId = Astro.locals.auth().userId!;
import Recents from "./recents.astro";
import { createActivity, inputActivity } from "@/src/lib/query/activity";
import { resentlyActivity } from "@/src/lib/query/activity";
import RecentsPh from "./recents-ph.astro";
import ProgressCircle from "./progress-circle.astro";

let state: "enable" | "disable" = "disable";
await resentlyActivity({
    userId: userId,
    limit: 1,
}).then((res) => {
    if (res instanceof Response) {
        console.error("Failed to fetch recent activities:", res.statusText);
        state = "disable"; // データ取得に失敗した場合は無効
    }
    state = "enable"; // データ取得に成功した場合は有効
});

let sending = false;
if (Astro.request.method == "POST") {
    sending = true;
    let data = await Astro.request.formData();
    let date = data.get("date") as unknown as Date;
    let dataParsed = new Date(date).toISOString().split("T")[0];
    let period = data.get("period") as unknown as number;

    const actData: typeof inputActivity = {
        date: dataParsed,
        id: userId, // バックエンドで生成するのでなんでもいい
        userId,
        period: period,
    };
    const result = await createActivity({
        userId,
        activity: actData,
    });
    if (result instanceof Response) {
        sending = false;
        state = "disable";
        console.error("Failed to create activity:", result.statusText);
    } else {
        sending = false;
        state = "enable";
        console.log("Activity created successfully:", result);
    }
}
---

{state === "disable" ? <ProgressCircle title="読み込み中" /> : null}
{sending ? <ProgressCircle title="送信中" /> : null}

<form
    id="activity-form"
    class="grid grid-cols-3 gap-4 items-center"
    method="POST"
>
    <label for="date" class="text-sm font-medium">
        日付<span class={style.text.necessary()}>*</span>
    </label>
    <input
        type="date"
        id="date"
        name="date"
        value=`${(new Date()).toISOString().split('T')[0]}`
        class={style.form.input({
            disable: state !== "enable" || sending,
        })}
        required
        disabled={state !== "enable" || sending ? "disabled" : undefined}
    />

    <label for="period" class="text-sm font-medium">
        稽古時間<span class={style.text.necessary()}>*</span>
    </label>
    <input
        type="number"
        id="period"
        name="period"
        value="1.5"
        step="0.5"
        class={style.form.input({
            disable: state !== "enable" || sending,
        })}
        required
        disabled={state !== "enable" || sending ? "disabled" : undefined}
    />
    <button
        type="submit"
        id="record-submit"
        class={style.form.button()}
        disabled={state !== "enable" || sending ? "disabled" : undefined}
    >
        {sending ? <ProgressCircle title="送信中" inline="inline" /> : "追加"}
    </button>
</form>

<Recents server:defer>
    <RecentsPh slot="fallback" />
</Recents>
