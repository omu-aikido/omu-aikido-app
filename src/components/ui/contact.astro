---
export const prerender = false;

// 環境変数からTurnstileのキーを読み込む
const TURNSTILE_SITE_KEY = import.meta.env.TURNSTILE_SITE_KEY;
const TURNSTILE_SECRET_KEY = import.meta.env.TURNSTILE_SECRET_KEY;

let errors = {
    name: "",
    email: "",
    msg: "",
    turnstile: "",
};
let submitted = false;
let submitSuccess = false;
let errorMessage = "";

if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const name = data.get("name");
        if (typeof name !== "string" || name.trim() === "") {
            errors.name = "名前は必須です。";
        }
        const email = data.get("email");
        if (typeof email !== "string" || email.trim() === "") {
            errors.email = "メールアドレスは必須です。";
        } else if (!email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
            errors.email = "有効なメールアドレスを入力してください。";
        }
        const msg = data.get("msg");
        if (
            typeof msg !== "string" ||
            msg.trim() === "" ||
            !msg.match(/[\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/)
        ) {
            errors.msg =
                "お問い合わせ内容は必須です。日本語で入力してください。";
        }

        // Turnstileトークンの検証
        const token = data.get("cf-turnstile-response");
        if (!token) {
            errors.turnstile = "ロボットでないことを確認してください。";
        } else {
            // Turnstileトークンをサーバーサイドで検証
            const formData = new FormData();
            formData.append("secret", TURNSTILE_SECRET_KEY);
            formData.append("response", token.toString());
            formData.append("remoteip", Astro.clientAddress);

            const turnstileResult = await fetch(
                "https://challenges.cloudflare.com/turnstile/v0/siteverify",
                {
                    method: "POST",
                    body: formData,
                }
            );

            const outcome = (await turnstileResult.json()) as {
                success: boolean;
                "error-codes": string[];
                challenge_ts: string;
                hostname: string;
            };

            if (!outcome.success) {
                errors.turnstile =
                    "認証に失敗しました。もう一度お試しください。";
            }
        }

        const hasErrors = Object.values(errors).some((msg) => msg);
        if (!hasErrors) {
            // ここで実際にメール送信処理を実行
            const response = await sendMail(
                name as string,
                email as string,
                msg as string
            );
            submitted = true;
            if (response.status === 200) {
                submitSuccess = true;
            } else {
                errorMessage = await response.text();
            }
        }
    } catch (e) {
        submitted = true;
        submitSuccess = false;
        if (e instanceof Error) {
            console.error(e.message);
            errorMessage =
                "送信処理中にエラーが発生しました。後ほど再度お試しください。";
        }
    }
}

async function sendMail(name: string, email: string, msg: string) {
    const sender = "大阪公立大学合氣道部";
    const senderEmail = "noreply@omu-aikido.com";
    const recipientEmail = "aikido.omu@gmail.com";
    const toAdminRes = await fetch("https://api.mailchannels.net/tx/v1/send", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            personalizations: [
                {
                    to: [{ email: recipientEmail }],
                },
            ],
            from: { email: senderEmail, name: sender },
            subject: "お問い合わせがありました",
            content: [
                {
                    type: "text/plain",
                    value: `【お名前】\n${name}様\n【メールアドレス】\n${email}\n【お問い合わせ内容】\n${msg}`,
                },
            ],
        }),
    });

    if (toAdminRes.ok) {
        await fetch("https://api.mailchannels.net/tx/v1/send", {
            method: "POST",
            headers: {
                "content-type": "application/json",
            },
            body: JSON.stringify({
                personalizations: [
                    {
                        to: [{ email }],
                    },
                ],
                from: { email: senderEmail, name: sender },
                subject: "お問い合わせありがとうございます",
                content: [
                    {
                        type: "text/plain",
                        value: `${name}様\n大阪公立大学合氣道部です。\nこの度はお問い合わせいただきありがとうございます。以下の内容でお問い合わせを受け付けました。\n【お問い合わせ内容】\n${msg}`,
                    },
                ],
            }),
        });

        return new Response("送信に成功しました！", { status: 200 });
    }

    return new Response("送信に失敗しました。", { status: 500 });
}
---

<script define:vars={{ siteKey: TURNSTILE_SITE_KEY }}>
    // Turnstileウィジェットが読み込まれた後のコールバック
    window.onloadTurnstileCallback = function () {
        turnstile.render("#turnstile-widget", {
            sitekey: siteKey,
            theme: "light",
        });
    };
</script>

{
    submitted && submitSuccess ? (
        <div class="success-message">
            <h3>送信完了</h3>
            <p>
                お問い合わせいただきありがとうございます。確認メールをお送りしましたのでご確認ください。
            </p>
            <p>内容を確認次第、担当者からご連絡いたします。</p>
        </div>
    ) : submitted && !submitSuccess ? (
        <div class="error-message">
            <h3>送信エラー</h3>
            <p>
                {errorMessage ||
                    "送信に失敗しました。時間をおいて再度お試しください。"}
            </p>
            <button onclick="window.location.reload()">再試行する</button>
        </div>
    ) : (
        <form method="POST">
            <label for="name">
                お名前
                <span class="required-mark">*</span>
            </label>
            <input
                id="name"
                type="text"
                name="name"
                placeholder="山田太郎"
                required
            />
            {errors.name && <p class="error">{errors.name}</p>}

            <label for="email">
                メールアドレス
                <span class="required-mark">*</span>
            </label>
            <input
                id="email"
                type="email"
                name="email"
                placeholder="example@mail.co.jp"
                required
            />
            {errors.email && <p class="error">{errors.email}</p>}

            <label for="msg">
                お問い合わせ内容
                <span class="required-mark">*</span>
            </label>
            <textarea
                id="msg"
                name="msg"
                placeholder="お気軽にお問い合わせください。"
                required
            />
            {errors.msg && <p class="error">{errors.msg}</p>}

            {/* Turnstileウィジェット */}
            <div id="turnstile-widget" class="turnstile-container" />
            {errors.turnstile && <p class="error">{errors.turnstile}</p>}

            <button type="submit">送信</button>
        </form>
    )
}

{/* CloudFlare Turnstileスクリプトの読み込み */}
<script
    src="https://challenges.cloudflare.com/turnstile/v0/api.js?onload=onloadTurnstileCallback"
    async
    defer></script>

<style>
    .error {
        color: rgb(var(--red));
    }
    .success-message {
        background-color: rgba(var(--green), 0.1);
        border: 1px solid rgb(var(--green));
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }
    .error-message {
        background-color: rgba(var(--red), 0.1);
        border: 1px solid rgb(var(--red));
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }
    button {
        cursor: pointer;
    }
    .turnstile-container {
        margin: 1rem 0;
    }
</style>
