---
interface Props {
  position: "left" | "right"
  icon?: string
}

import { style } from "@/src/styles/component"
const { position, icon } = Astro.props
---

<astro-modal>
  <span id="open-modal-btn" class={style.modal.button()}>{icon} </span>
  <div id="modal" class={`${style.modal.bg()} ${position}`}>
    <div class={style.modal.content({ position })}>
      <span
        id="close-modal-btn"
        class="cursor-pointer flex items-center justify-center text-xl h-8 w-8 rounded-xl outline-2 outline-slate-400/60 dark:outline-slate-500/60
                transition-all duration-300 ease-out hover:bg-slate-400 dark:hover:bg-slate-600 hover:scale-110 hover:-rotate-3
                active:scale-95 active:-rotate-1"
        >×</span
      >
      <span class="block mt-4">&nbsp;</span>
      <div class="flex flex-col">
        <slot />
      </div>
    </div>
  </div>
</astro-modal>

<script>
  class Modal extends HTMLElement {
    constructor() {
      super()
      const modal = this.querySelector("#modal") as HTMLElement
      const openBtn = this.querySelector("#open-modal-btn")
      const closeBtn = this.querySelector("#close-modal-btn")

      function setupModalListeners() {
        openBtn?.addEventListener("click", () => {
          if (modal) {
            modal.style.display = "flex"
            setTimeout(() => {
              modal.classList.add("opacity-100")

              // モーダルの内部コンテンツに適切なクラスを追加
              const modalContent = modal.querySelector("div")
              if (modalContent) {
                modalContent.classList.remove("translate-x-full", "-translate-x-full")
                modalContent.classList.add("translate-x-0")
              }
            }, 10)
          }
        })

        closeBtn?.addEventListener("click", closeModal)

        // モーダル外クリックで閉じる
        modal?.addEventListener("click", (e) => {
          if (e.target === modal) {
            closeModal()
          }
        })

        // ESCキーでモーダルを閉じる
        document.addEventListener("keydown", (e) => {
          if (e.key === "Escape" && modal && modal.style.display === "flex") {
            closeModal()
          }
        })

        function closeModal() {
          if (modal) {
            modal.classList.remove("opacity-100")

            // モーダルの内部コンテンツを元の位置に戻す
            const modalContent = modal.querySelector("div")
            const position = modal.classList.contains("right")
              ? "translate-x-full"
              : "-translate-x-full"

            if (modalContent) {
              modalContent.classList.remove("translate-x-0")
              modalContent.classList.add(position)
            }

            setTimeout(() => {
              modal.style.display = "none"
            }, 300)
          }
        }
      }

      // 初期設定
      setupModalListeners()

      // ページ遷移後も実行されるように
      document.addEventListener("astro:page-load", setupModalListeners)
    }
  }

  if (!customElements.get("astro-modal")) {
    customElements.define("astro-modal", Modal)
  }
</script>
