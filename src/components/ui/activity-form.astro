---
import { style } from "../../styles/component";
import { createActivity, inputActivity } from "../../lib/query/activity";

// エラーオブジェクトの初期化
const errors = { date: "", period: "" };
let isSubmitting = false;
let isSuccess = false;
let errorMessage = "";

// ユーザーIDの取得
const userId = Astro.locals.auth().userId;
if (!userId) {
    return Astro.redirect("/sign-in");
}

// フォーム送信処理
if (Astro.request.method === "POST") {
    isSubmitting = true;

    try {
        const data = await Astro.request.formData();
        const date = data.get("date");
        const period = data.get("period");

        // バリデーション
        if (!date || typeof date !== "string") {
            errors.date = "日付を入力してください";
        }

        if (
            !period ||
            typeof period !== "string" ||
            isNaN(parseFloat(period)) ||
            parseFloat(period) <= 0
        ) {
            errors.period = "有効な稽古時間を入力してください";
        }

        const hasErrors = Object.values(errors).some((msg) => msg);

        if (!hasErrors) {
            const dateParsed = new Date(date as string)
                .toISOString()
                .split("T")[0];
            const periodValue = parseFloat(period as string);

            // 稽古データの作成
            const actData: typeof inputActivity = {
                date: dateParsed,
                id: userId, // バックエンドで生成されるのでなんでもOK
                userId,
                period: periodValue,
            };

            // 稽古記録の作成
            const result = await createActivity({
                userId,
                activity: actData,
            });

            if (result instanceof Response) {
                console.error(
                    "稽古記録の作成に失敗しました:",
                    result.statusText
                );
                errorMessage =
                    "稽古記録の作成に失敗しました。後ほど再度お試しください。";
            } else {
                console.log("稽古記録を作成しました:", result);
                isSuccess = true;
            }
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error("エラーが発生しました:", error.message);
            errorMessage = "エラーが発生しました。後ほど再度お試しください。";
        }
    } finally {
        isSubmitting = false;
    }
}
---

{
    errorMessage && (
        <div class="error-message">
            <p>{errorMessage}</p>
        </div>
    )
}

<form
    id="activity-form"
    class="grid grid-cols-3 gap-4 items-center"
    method="POST"
>
    <label for="date" class="text-sm font-medium">
        日付<span class={style.text.necessary()}>*</span>
    </label>
    <input
        type="date"
        id="date"
        name="date"
        value={`${new Date().toISOString().split("T")[0]}`}
        class={`${style.form.input({
            disable: isSubmitting,
        })} ${errors.date ? "error-input" : ""}`}
        required
        disabled={isSubmitting ? "disabled" : undefined}
    />
    {
        errors.date && (
            <p class="text-red-500 text-sm field-error">{errors.date}</p>
        )
    }

    <label for="period" class="text-sm font-medium">
        稽古時間<span class={style.text.necessary()}>*</span>
    </label>
    <input
        type="number"
        id="period"
        name="period"
        value="1.5"
        step="0.5"
        class={`${style.form.input({
            disable: isSubmitting,
        })} ${errors.period ? "error-input" : ""}`}
        required
        disabled={isSubmitting ? "disabled" : undefined}
    />
    {
        errors.period && (
            <p class="text-red-500 text-sm field-error">{errors.period}</p>
        )
    }

    <button
        type="submit"
        id="record-submit"
        class={`${style.form.button()} relative`}
        disabled={isSubmitting ? "disabled" : undefined}
    >
        <span class={isSubmitting ? "invisible" : "visible"}>追加</span>
        {
            isSubmitting && (
                <span class="absolute inset-0 flex items-center justify-center">
                    <span class="spinner" />
                </span>
            )
        }
    </button>
</form>
