---
interface Props {
    id: string;
}

const { id } = Astro.props;

import "../../styles/global.css";
import * as profile from "@/src/lib/query/profile";
import { grade, year } from "@/src/utils";
import { Role } from "@/src/class";

const userProfile = await profile.getProfile({ userId: id });
if (!userProfile || userProfile instanceof Response) {
    return Astro.redirect("/admin");
}

if (Astro.request.method == "POST") {
    const data = await Astro.request.formData();
    const grade = data.get("grade") as unknown as number;
    const getGradeAt = data.get("getGradeAt") as unknown as Date;
    const joinedAt = data.get("joinedAt") as unknown as number;
    const year = data.get("year") as string;
    const role = data.get("role") as string;

    const result = await profile.updateProfile({
        id: id,
        grade: grade,
        getGradeAt: getGradeAt,
        joinedAt: joinedAt,
        year: year,
        role: role,
    });

    if (result instanceof Response) {
        return Astro.redirect("/account/management");
    }
}
---

<user-modal>
    <span id="open-modal-btn" class="open-modal-btn"><slot /></span>
    <div id="modal" class="modal">
        <div class="modal-content">
            <span id="close-modal-btn" class="close-btn">×</span>
            <div class="modal-content-inner">
                <form id="user-form" class="user-form" method="POST">
                    <label for="grade">
                        所持級段位
                        <span style="color:rgb(var(--maroon))">*</span>
                    </label>
                    <select id="grade" name="grade" required>
                        {
                            grade.map((g) => (
                                <option
                                    value={g.grade}
                                    selected={g.grade === userProfile.grade}
                                >
                                    {g.name}
                                </option>
                            ))
                        }
                    </select>

                    <label> 級段位取得日 </label>
                    <input
                        type="date"
                        id="getGradeAt"
                        name="getGradeAt"
                        value=`${(new Date(userProfile.getGradeAt)).toISOString().split('T')[0]}`
                    />

                    <label for="joinedAt">
                        入部年度
                        <span style="color:rgb(var(--maroon))">*</span>
                    </label>
                    <input
                        type="number"
                        id="joinedAt"
                        name="joinedAt"
                        placeholder="4桁の数字"
                        required
                        value={userProfile.joinedAt}
                    />
                    <label for="year">
                        学年
                        <span style="color:rgb(var(--maroon))">*</span>
                    </label>
                    <select
                        id="year"
                        name="year"
                        value={userProfile.year}
                        required
                    >
                        {
                            year.map((y) => (
                                <option
                                    value={y.year}
                                    selected={y.year === userProfile.year}
                                >
                                    {y.name}
                                </option>
                            ))
                        }
                    </select>
                    <label for="role">役職</label>
                    <select
                        id="role"
                        name="role"
                        value={userProfile.role}
                        required
                    >
                        {
                            Role.ALL.map((r) => (
                                <option
                                    value={r.toString()}
                                    selected={
                                        r === Role.fromString(userProfile.role)
                                    }
                                >
                                    {r.ja}
                                </option>
                            ))
                        }
                    </select>
                    <button type="submit">保存</button>
                </form>
            </div>
        </div>
    </div>
</user-modal>

<script>
    class Modal extends HTMLElement {
        constructor() {
            super();
            const modal = this.querySelector(".modal") as HTMLElement;
            const openBtn = this.querySelector(".open-modal-btn");
            const closeBtn = this.querySelector(".close-btn");

            function setupModalListeners() {
                openBtn?.addEventListener("click", () => {
                    if (modal) {
                        modal.style.display = "flex";
                        setTimeout(() => {
                            modal.classList.add("show");
                        }, 10);
                    }
                });

                closeBtn?.addEventListener("click", () => {
                    if (modal) {
                        modal.classList.remove("show");
                        setTimeout(() => {
                            modal.style.display = "none";
                        }, 300);
                    }
                });

                // モーダル外クリックで閉じる
                modal?.addEventListener("click", (e) => {
                    if (e.target === modal) {
                        modal.classList.remove("show");
                        setTimeout(() => {
                            modal.style.display = "none";
                        }, 300);
                    }
                });
            }

            // 初期設定
            setupModalListeners();

            // ページ遷移後も実行されるように
            document.addEventListener("astro:page-load", setupModalListeners);
        }
    }
    customElements.define("user-modal", Modal);
</script>

<style>
    /* id modal を浮遊させて表示する*/
    .modal {
        position: fixed;
        left: 50%;
        top: 50%;
        background-color: rgb(0 0 0 / 0.3);
        backdrop-filter: blur(3px);
        transform: translate(-50%, -50%);
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .modal-content {
        display: flex;
        justify-content: center;
        margin-bottom: 3rem;
    }

    .modal-content-inner {
        background-color: rgb(var(--crust) / 0.5);
        padding: 1rem;
        min-width: 20rem;
        border-radius: 1rem;
        box-shadow: 0px 0px 0px 2px rgb(var(--mauve));
    }

    .user-form {
        display: flex;
        flex-direction: column;
    }

    span#close-modal-btn {
        cursor: pointer;
        width: 1rem;
        height: 1rem;
        margin-top: -1rem;
        margin-left: -1rem;
    }
</style>
