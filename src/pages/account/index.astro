---
import { default as Layout } from "@/src/layouts/auth-layout.astro";
import { UserProfile } from "@clerk/astro/components";

const user = await Astro.locals.currentUser();

if (!user) {
    return Astro.redirect("/sign-in");
}

import * as profile from "@/src/lib/query/profile";
import { grade, year } from "@/src/utils";
import { Role } from "@/src/class";

const userProfile = await profile.getProfile({ userId: user.id });
console.log(userProfile);
if (userProfile instanceof Response) {
    return Astro.redirect("/account/recovery");
}

const role = await profile.getRole({ userId: user.id });

const isNotMember = role !== Role.MEMBER;

if (Astro.request.method == "POST") {
    let data = await Astro.request.formData();
    let grade = data.get("grade") as unknown as number;
    let getGradeAt = data.get("getGradeAt") as unknown as Date;
    let joinedAt = data.get("joinedAt") as unknown as number;
    let year = data.get("year") as string;

    const result = await profile.updateProfile({
        id: user.id,
        grade: grade,
        getGradeAt: getGradeAt,
        joinedAt: joinedAt,
        year: year,
        role: role?.toString() ?? "member",
    });
    if (result instanceof Error) {
        return new Response(result.message, { status: 500 });
    } else {
        return Astro.redirect("/account");
    }
}
---

<Layout title="アカウントメニュー">
    <UserProfile>
        <UserProfile.Page label="ステータス" url="status">
            <svg
                slot="label-icon"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 512 512"
                fill="currentColor"
            >
                <path
                    d="M 225.132 50 L 274.865 50 L 290.927 101.539 C 303.186 104.918 314.978 109.803 326.037 116.081 L 373.838 90.994 L 409.006 126.161 L 383.918 173.962 C 390.195 185.021 395.081 196.813 398.46 209.072 L 449.999 225.133 L 449.999 274.866 L 398.46 290.928 C 395.081 303.187 390.195 314.979 383.918 326.038 L 409.006 373.839 L 373.838 409.007 L 326.037 383.919 C 314.978 390.196 303.186 395.082 290.927 398.461 L 274.865 450 L 225.132 450 L 209.071 398.461 C 196.812 395.082 185.02 390.196 173.961 383.919 L 126.16 409.007 L 90.993 373.839 L 116.08 326.038 C 109.802 314.979 104.916 303.187 101.538 290.928 L 49.999 274.866 L 49.999 225.133 L 101.538 209.072 C 104.916 196.813 109.802 185.021 116.08 173.962 L 90.993 126.161 L 126.16 90.994 L 173.961 116.081 C 185.02 109.803 196.812 104.918 209.071 101.539 L 225.132 50 Z M 249.999 184 C 199.192 184 167.439 239.003 192.841 283.003 C 204.632 303.421 226.419 316 249.999 316 C 300.806 316 332.559 261.003 307.157 217.003 C 295.366 196.578 273.578 184 249.999 184"
                ></path>
            </svg>

            <h1>ステータス</h1>
            <form id="setup-form" class="setup-form" method="POST">
                <label for="grade">
                    所持級段位
                    <span style="color:rgb(var(--maroon))">*</span>
                </label>
                <select id="grade" name="grade" required>
                    {
                        grade.map((g) => (
                            <option
                                value={g.grade}
                                selected={g.grade === userProfile.grade}
                            >
                                {g.name}
                            </option>
                        ))
                    }
                </select>

                <label> 級段位取得日 </label>
                <input
                    type="date"
                    id="getGradeAt"
                    name="getGradeAt"
                    value=`${(new Date(userProfile.getGradeAt)).toISOString().split('T')[0]}`
                />

                <label for="joinedAt">
                    入部年度
                    <span style="color:rgb(var(--maroon))">*</span>
                </label>
                <input
                    type="number"
                    id="joinedAt"
                    name="joinedAt"
                    placeholder="4桁の数字"
                    required
                    value={userProfile.joinedAt}
                />
                <label for="year">
                    学年
                    <span style="color:rgb(var(--maroon))">*</span>
                </label>
                <select id="year" name="year" value={userProfile.year} required>
                    {
                        year.map((y) => (
                            <option
                                value={y.year}
                                selected={y.year === userProfile.year}
                            >
                                {y.name}
                            </option>
                        ))
                    }
                </select>
                <button type="submit">登録</button>
            </form>
        </UserProfile.Page>
        {
            isNotMember ? (
                <UserProfile.Link label="管理者" url="/admin/account">
                    <svg
                        slot="label-icon"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 512 512"
                        fill="currentColor"
                    >
                        <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
                    </svg>
                </UserProfile.Link>
            ) : (
                ""
            )
        }
    </UserProfile>
    <style>
        tr {
            margin-left: 1rem;
            margin-right: 1rem;
        }

        form {
            display: grid;
            grid-template-columns: 150px 1fr;
            grid-gap: 1rem;
            align-items: center;
        }
    </style>
</Layout>
