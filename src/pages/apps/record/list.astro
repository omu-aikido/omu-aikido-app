---
import { default as Layout } from "@/src/layouts/auth-layout.astro";
import ActivityList from "@/src/components/ui/activity-list.astro";
import ProgressCircle from "@/src/components/ui/progress-circle.astro";

const startParam = Astro.url.searchParams.get("start");
const endParam = Astro.url.searchParams.get("end");
const pageParam = Astro.url.searchParams.get("page");
const currentPage = pageParam ? parseInt(pageParam) : 1;

// 追加: resetパラメータがあればクエリを削除してリダイレクト
if (Astro.url.searchParams.get("reset")) {
    return Astro.redirect(Astro.url.pathname);
}

const startValue = startParam ? new Date(startParam) : undefined;
const endValue = endParam ? new Date(endParam) : undefined;

// 現在のベースURLを取得
const currentUrl = Astro.url.toString();
---

<Layout title="稽古記録 一覧">
    <h1>一覧</h1>

    <!-- フィルター用フィールド -->
    <form id="filter-form" class="filter-form" method="GET">
        <label for="start">開始日</label>
        <input
            type="date"
            id="start"
            name="start"
            value={startValue ? startValue.toISOString().split("T")[0] : ""}
        />
        <label for="end">終了日</label>
        <input
            type="date"
            id="end"
            name="end"
            value={endValue ? endValue.toISOString().split("T")[0] : ""}
        />
        <!-- フィルター適用時にはpage=1に戻す -->
        <input type="hidden" name="page" value="1" />
        <!-- 変更: type="reset"からtype="submit"に変更しリセット用パラメータを送信 -->
        <button type="submit" name="reset" value="true" class="reset_button"
            >リセット</button
        >
        <button type="submit" class="submit_button">フィルター</button>
    </form>

    <ActivityList
        startDate={startValue}
        endDate={endValue}
        page={currentPage}
        baseUrl={currentUrl}
        server:defer
    >
        <ProgressCircle title="loading" slot="fallback" />
    </ActivityList>

    <hr />
    <a href="/apps/record" class="button">←稽古記録ホームに戻る</a>
</Layout>

<style>
    .filter-form {
        display: grid;
        grid-template-columns: 100px 1fr;
        gap: 1rem;
        align-items: center;
    }
    .filter-form .reset_button {
        width: 150px;
        background-color: rgb(var(--maroon) / 0.6);
    }
    .filter-form .reset_button:hover {
        background-color: rgb(var(--red));
    }
    .filter-form .submit_button {
        margin-left: 50px;
        width: 150px;
    }

    .edit-btn {
        margin-right: 8px;
        padding: 6px 12px;
        background-color: rgb(var(--blue));
        color: rgb(var(--crust));
        text-decoration: none;
        border-radius: 4px;
    }
    .edit-btn:hover {
        background-color: rgb(var(--sapphire));
    }
    .delete-btn {
        margin-right: 8px;
        padding: 6px 12px;
        background-color: rgb(var(--red));
        color: rgb(var(--crust));
        text-decoration: none;
        border-radius: 4px;
    }
    .delete-btn:hover {
        background-color: rgb(var(--red) / 0.8);
    }

    /* ページネーションのスタイル */
    .pagination {
        margin-top: 2rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }
    .pagination-controls {
        display: flex;
        gap: 1rem;
    }
    .page-btn {
        padding: 0.5rem 1.5rem;
        background-color: rgb(var(--blue));
        color: rgb(var(--crust));
        text-decoration: none;
        border-radius: 4px;
        display: inline-block;
    }
    .page-btn:hover:not(.disabled) {
        background-color: rgb(var(--sapphire));
    }
    .page-btn.disabled {
        background-color: rgb(var(--overlay0));
        cursor: not-allowed;
        opacity: 0.6;
    }
    .pagination-info {
        font-size: 0.9rem;
        color: rgb(var(--text));
    }
</style>
