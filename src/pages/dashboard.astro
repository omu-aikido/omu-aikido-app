---
import { default as Layout } from "@/src/layouts/auth-layout.astro";
import { getRole } from "@/src/lib/query/profile";
import { Role } from "@/src/class";
import NewsReader from "@/src/components/ui/news-reader.astro";
import { createActivity, inputActivity } from "@/src/lib/query/activity";

import Grid from "@/src/components/ui/grid.astro";
import AppIcon from "@/src/components/ui/app-icon.astro";
import { APPS } from "@/src/const";
import AddRecord from "@/src/components/ui/add-record.astro";

const userId = Astro.locals.auth().userId!;
const role = (await getRole({ userId })) as Role;

if (role.isManagement() && !APPS.some((app) => app.name === "管理者メニュー")) {
    APPS.push({
        name: "管理者メニュー",
        path: "/admin",
        desc: "管理者メニューに移動します。",
    });
}

if (Astro.request.method == "POST") {
    let data = await Astro.request.formData();
    let date = data.get("date") as unknown as Date;
    let dataParsed = new Date(date).toISOString().split("T")[0];
    let period = data.get("period") as unknown as number;

    const actData: typeof inputActivity = {
        date: dataParsed,
        id: userId, // バックエンドで生成するのでなんでもいい
        userId,
        period: period,
    };
    const result = await createActivity({
        userId,
        activity: actData,
    });

    if (result.rowsAffected === 1) {
        return Astro.redirect("/apps/record");
    }
}
---

<Layout title="ダッシュボード">
    <NewsReader content="short" path="news" source="app/news" />
    <hr />
    <h2>追加</h2>

    <AddRecord server:defer />

    <hr />
    <Grid variant="offset">
        {
            APPS.map((app) => (
                <AppIcon title={app.name} id={app.path} desc={app.desc} />
            ))
        }
    </Grid>
</Layout>
