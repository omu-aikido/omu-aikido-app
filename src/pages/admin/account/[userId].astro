---
import { default as Layout } from "@/src/layouts/layout.astro"
import { deleteUser } from "@/src/lib/query/admin/clerk"

const currentUser = Astro.locals.auth().userId

// [userId]を取得
const { userId } = Astro.params

if (!currentUser || !userId) {
  return Astro.redirect("/admin/account")
}

import * as profile from "@/src/lib/query/admin/profile"
import { grade, year } from "@/src/utils"
import { Role } from "@/src/zod"
import { getUser } from "@/src/lib/query/admin/clerk"
import { getProfile } from "@/src/lib/query/profile"

const userAccount = (await getUser(userId))!
const userProfile = await getProfile({ userId })
if (userProfile instanceof Response) {
  return Astro.redirect("/admin/account")
}

if (Astro.request.method == "POST") {
  const data = await Astro.request.formData()
  const grade = data.get("grade") as unknown as number
  const getGradeAt = data.get("getGradeAt") as unknown as Date
  const joinedAt = data.get("joinedAt") as unknown as number
  const year = data.get("year") as string
  const role = data.get("role") as string

  if (data.get("_action") === "deleteUser") {
    await deleteUser(userId)
    return Astro.redirect("/admin/account")
  }

  const result = await profile.updateProfile({
    applicateBy: currentUser,
    id: userId,
    grade: grade,
    getGradeAt: getGradeAt,
    joinedAt: joinedAt,
    year: year,
    role: role,
  })

  if (result instanceof Response) {
    return Astro.redirect("/admin/account")
  }
}
---

<Layout title="アカウント編集">
  <h2 class="flex items-center gap-4">
    <img src={userAccount.imageUrl} alt="" class="w-8 h-8 rounded-full" />
    <p>
      {userAccount.lastName}
      {userAccount.firstName}
    </p>
  </h2>
  <h3>プロフィール</h3>
  <form id="user-form" class="grid grid-cols-4 gap-4 items-center max-w-md mx-auto" method="POST">
    <label for="grade" class="col-span-1">
      所持級段位
      <span class="text-rose-600">*</span>
    </label>
    <select
      id="grade"
      name="grade"
      required
      class="col-span-3 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
    >
      {
        grade.map((g) => (
          <option value={g.grade} selected={g.grade === userProfile.grade}>
            {g.name}
          </option>
        ))
      }
    </select>

    <label class="col-span-1"> 級段位取得日 </label>
    <input
      type="date"
      id="getGradeAt"
      name="getGradeAt"
      class="col-span-3 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      value=`${(new Date(userProfile.getGradeAt ?? "")).toISOString().split('T')[0]}`
    />
    <label for="joinedAt" class="col-span-1">
      入部年度
      <span class="text-rose-600">*</span>
    </label>
    <input
      type="number"
      id="joinedAt"
      name="joinedAt"
      placeholder="4桁の数字"
      required
      class="col-span-3 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      value={userProfile.joinedAt}
    />
    <label for="year" class="col-span-1">
      学年
      <span class="text-rose-600">*</span>
    </label>
    <select
      id="year"
      name="year"
      value={userProfile.year}
      required
      class="col-span-3 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
    >
      {
        year.map((y) => (
          <option value={y.year} selected={y.year === userProfile.year}>
            {y.name}
          </option>
        ))
      }
    </select>
    <label for="role" class="col-span-1">役職</label>
    <select
      id="role"
      name="role"
      value={userProfile.role}
      required
      class="col-span-3 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
    >
      {
        Role.ALL.map((r) => (
          <option value={r.toString()} selected={r === Role.fromString(userProfile.role)}>
            {r.ja}
          </option>
        ))
      }
    </select>
    <button
      type="submit"
      class="col-span-2 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors"
      >保存</button
    >
  </form>

  <hr class="my-6" />
  <h3 class="text-red-500 mb-4">Danger Zone</h3>
  <form method="POST" onsubmit="return confirm('本当に削除しますか？');" class="max-w-md mx-auto">
    <input type="hidden" name="_action" value="deleteUser" />
    <button
      type="submit"
      class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors"
    >
      削除
    </button>
  </form>
</Layout>
